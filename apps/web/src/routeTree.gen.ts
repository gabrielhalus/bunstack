/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard/route'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as DashboardProfileRouteImport } from './routes/_dashboard/profile'
import { Route as DashboardUsersRouteRouteImport } from './routes/_dashboard/users/route'
import { Route as DashboardRolesRouteRouteImport } from './routes/_dashboard/roles/route'
import { Route as DashboardUsersIndexRouteImport } from './routes/_dashboard/users/index'
import { Route as DashboardRolesIndexRouteImport } from './routes/_dashboard/roles/index'
import { Route as DashboardRolesNameRouteRouteImport } from './routes/_dashboard/roles/$name/route'
import { Route as DashboardRolesNameIndexRouteImport } from './routes/_dashboard/roles/$name/index'
import { Route as DashboardRolesNamePermissionsRouteImport } from './routes/_dashboard/roles/$name/permissions'
import { Route as DashboardRolesNameMembersRouteImport } from './routes/_dashboard/roles/$name/members'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardProfileRoute = DashboardProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardUsersRouteRoute = DashboardUsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardRolesRouteRoute = DashboardRolesRouteRouteImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardUsersIndexRoute = DashboardUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardUsersRouteRoute,
} as any)
const DashboardRolesIndexRoute = DashboardRolesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRolesRouteRoute,
} as any)
const DashboardRolesNameRouteRoute = DashboardRolesNameRouteRouteImport.update({
  id: '/$name',
  path: '/$name',
  getParentRoute: () => DashboardRolesRouteRoute,
} as any)
const DashboardRolesNameIndexRoute = DashboardRolesNameIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRolesNameRouteRoute,
} as any)
const DashboardRolesNamePermissionsRoute =
  DashboardRolesNamePermissionsRouteImport.update({
    id: '/permissions',
    path: '/permissions',
    getParentRoute: () => DashboardRolesNameRouteRoute,
  } as any)
const DashboardRolesNameMembersRoute =
  DashboardRolesNameMembersRouteImport.update({
    id: '/members',
    path: '/members',
    getParentRoute: () => DashboardRolesNameRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/roles': typeof DashboardRolesRouteRouteWithChildren
  '/users': typeof DashboardUsersRouteRouteWithChildren
  '/profile': typeof DashboardProfileRoute
  '/': typeof DashboardIndexRoute
  '/roles/$name': typeof DashboardRolesNameRouteRouteWithChildren
  '/roles/': typeof DashboardRolesIndexRoute
  '/users/': typeof DashboardUsersIndexRoute
  '/roles/$name/members': typeof DashboardRolesNameMembersRoute
  '/roles/$name/permissions': typeof DashboardRolesNamePermissionsRoute
  '/roles/$name/': typeof DashboardRolesNameIndexRoute
}
export interface FileRoutesByTo {
  '/profile': typeof DashboardProfileRoute
  '/': typeof DashboardIndexRoute
  '/roles': typeof DashboardRolesIndexRoute
  '/users': typeof DashboardUsersIndexRoute
  '/roles/$name/members': typeof DashboardRolesNameMembersRoute
  '/roles/$name/permissions': typeof DashboardRolesNamePermissionsRoute
  '/roles/$name': typeof DashboardRolesNameIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/_dashboard/roles': typeof DashboardRolesRouteRouteWithChildren
  '/_dashboard/users': typeof DashboardUsersRouteRouteWithChildren
  '/_dashboard/profile': typeof DashboardProfileRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/roles/$name': typeof DashboardRolesNameRouteRouteWithChildren
  '/_dashboard/roles/': typeof DashboardRolesIndexRoute
  '/_dashboard/users/': typeof DashboardUsersIndexRoute
  '/_dashboard/roles/$name/members': typeof DashboardRolesNameMembersRoute
  '/_dashboard/roles/$name/permissions': typeof DashboardRolesNamePermissionsRoute
  '/_dashboard/roles/$name/': typeof DashboardRolesNameIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/roles'
    | '/users'
    | '/profile'
    | '/'
    | '/roles/$name'
    | '/roles/'
    | '/users/'
    | '/roles/$name/members'
    | '/roles/$name/permissions'
    | '/roles/$name/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/profile'
    | '/'
    | '/roles'
    | '/users'
    | '/roles/$name/members'
    | '/roles/$name/permissions'
    | '/roles/$name'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_dashboard/roles'
    | '/_dashboard/users'
    | '/_dashboard/profile'
    | '/_dashboard/'
    | '/_dashboard/roles/$name'
    | '/_dashboard/roles/'
    | '/_dashboard/users/'
    | '/_dashboard/roles/$name/members'
    | '/_dashboard/roles/$name/permissions'
    | '/_dashboard/roles/$name/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/profile': {
      id: '/_dashboard/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof DashboardProfileRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/users': {
      id: '/_dashboard/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof DashboardUsersRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/roles': {
      id: '/_dashboard/roles'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof DashboardRolesRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/users/': {
      id: '/_dashboard/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof DashboardUsersIndexRouteImport
      parentRoute: typeof DashboardUsersRouteRoute
    }
    '/_dashboard/roles/': {
      id: '/_dashboard/roles/'
      path: '/'
      fullPath: '/roles/'
      preLoaderRoute: typeof DashboardRolesIndexRouteImport
      parentRoute: typeof DashboardRolesRouteRoute
    }
    '/_dashboard/roles/$name': {
      id: '/_dashboard/roles/$name'
      path: '/$name'
      fullPath: '/roles/$name'
      preLoaderRoute: typeof DashboardRolesNameRouteRouteImport
      parentRoute: typeof DashboardRolesRouteRoute
    }
    '/_dashboard/roles/$name/': {
      id: '/_dashboard/roles/$name/'
      path: '/'
      fullPath: '/roles/$name/'
      preLoaderRoute: typeof DashboardRolesNameIndexRouteImport
      parentRoute: typeof DashboardRolesNameRouteRoute
    }
    '/_dashboard/roles/$name/permissions': {
      id: '/_dashboard/roles/$name/permissions'
      path: '/permissions'
      fullPath: '/roles/$name/permissions'
      preLoaderRoute: typeof DashboardRolesNamePermissionsRouteImport
      parentRoute: typeof DashboardRolesNameRouteRoute
    }
    '/_dashboard/roles/$name/members': {
      id: '/_dashboard/roles/$name/members'
      path: '/members'
      fullPath: '/roles/$name/members'
      preLoaderRoute: typeof DashboardRolesNameMembersRouteImport
      parentRoute: typeof DashboardRolesNameRouteRoute
    }
  }
}

interface DashboardRolesNameRouteRouteChildren {
  DashboardRolesNameMembersRoute: typeof DashboardRolesNameMembersRoute
  DashboardRolesNamePermissionsRoute: typeof DashboardRolesNamePermissionsRoute
  DashboardRolesNameIndexRoute: typeof DashboardRolesNameIndexRoute
}

const DashboardRolesNameRouteRouteChildren: DashboardRolesNameRouteRouteChildren =
  {
    DashboardRolesNameMembersRoute: DashboardRolesNameMembersRoute,
    DashboardRolesNamePermissionsRoute: DashboardRolesNamePermissionsRoute,
    DashboardRolesNameIndexRoute: DashboardRolesNameIndexRoute,
  }

const DashboardRolesNameRouteRouteWithChildren =
  DashboardRolesNameRouteRoute._addFileChildren(
    DashboardRolesNameRouteRouteChildren,
  )

interface DashboardRolesRouteRouteChildren {
  DashboardRolesNameRouteRoute: typeof DashboardRolesNameRouteRouteWithChildren
  DashboardRolesIndexRoute: typeof DashboardRolesIndexRoute
}

const DashboardRolesRouteRouteChildren: DashboardRolesRouteRouteChildren = {
  DashboardRolesNameRouteRoute: DashboardRolesNameRouteRouteWithChildren,
  DashboardRolesIndexRoute: DashboardRolesIndexRoute,
}

const DashboardRolesRouteRouteWithChildren =
  DashboardRolesRouteRoute._addFileChildren(DashboardRolesRouteRouteChildren)

interface DashboardUsersRouteRouteChildren {
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute
}

const DashboardUsersRouteRouteChildren: DashboardUsersRouteRouteChildren = {
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
}

const DashboardUsersRouteRouteWithChildren =
  DashboardUsersRouteRoute._addFileChildren(DashboardUsersRouteRouteChildren)

interface DashboardRouteRouteChildren {
  DashboardRolesRouteRoute: typeof DashboardRolesRouteRouteWithChildren
  DashboardUsersRouteRoute: typeof DashboardUsersRouteRouteWithChildren
  DashboardProfileRoute: typeof DashboardProfileRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardRolesRouteRoute: DashboardRolesRouteRouteWithChildren,
  DashboardUsersRouteRoute: DashboardUsersRouteRouteWithChildren,
  DashboardProfileRoute: DashboardProfileRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
